Question 1 : 

You are given a string s containing just the characters in an order '(' , ')' , ‘{’ , ‘}’ , '[' and ']' , determine if the input string is valid. Return 1 if valid else 0 if invalid.

An input string is said to be valid iff:

1.) Open brackets must be closed by the same type of brackets.

2.)Open brackets must be closed in the correct order.

Input Format:
First Parameter - String s

Output Format:
Return the number.

Sample Tests
Case1:
Input: s = "()"
Output: 1
Case2:
Input: s = "()[]{}"
Output: 1
Case3:
Input: s = "(]"
Output: 0
Constraints:-
1 <= s.length <= 104
s consists of parentheses only '()[]{}’.
Expected Time Complexity: O(n)
Expected Space Complexity: O(n)

Answer :

int solve(string str){
    stack<char> st;

    for(int i=0;i<str.size();i++){
        if(str[i] == '(' or str[i] == '{' or str[i] == '['){
            st.push(str[i]);
        }else{
            if(st.empty()){
                return false;
            }else{
                char ch = st.top();
                st.pop();
                if(ch == '('){
                    if(str[i] != ')'){
                        return false;
                    }
                }
                else if(ch == '['){
                    if(str[i] != ']'){
                        return false;
                    }
                }
                else if(ch == '{'){
                    if(str[i] != '}'){
                        return false;
                    }
                }else{
                    return false;
                }
            }
        }
    }

    if(st.empty()){
        return true;
    }

    return false;
}

Question 2 : 

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can harvest after raining .

Input Format:
First Parameter - n , size of the array
Second Parameter - List of positive integer , height

Output Format:
Return the number

Example 1:
img

Input:
    n = 12
    height = [0 1 0 2 1 0 1 3 2 1 2 1]
Output:
     6
Explanation:
    The above elevation map (black section) is represented by array [0 1 0 2 1 0 1 3 2 1 2 1] . In this case, 6 units of rain water (blue section) are being harvested.
Example 2:
Input:
    n = 6
    height = [4 2 0 3 2 5]
Output:
    9
Constraints:
n == height.length
1 <= n <= 2 * 104
0 <= height[i] <=105
Expected Time Complexity: O(n)
Expected Space Complexity: O(1)

Answer : 

int solve(int n, vector<int> height){
    // finding left max 
    vector<int> leftMax;
    int ls = height[0];
    leftMax.push_back(ls);
    for(int i=1;i<n;i++){
        if(ls < height[i]){
            ls =  height[i];
        }
        leftMax.push_back(ls);
    }

    // finding right max

    int rs = height[n-1];
    vector<int> rightMax(n);
    rightMax[n-1] = rs;
    for(int i=n-2;i>=0;i--){
        if(rs < height[i]){
            rs = height[i];
        }
        rightMax[i] = rs;
    }

    // main logic 
    int water = 0;

    for(int i=0;i<n;i++){
        int num = min(rightMax[i],leftMax[i]) - height[i];
        water += num;
    }

    return water;
}

Question 3 :

Given a string s which consists of lowercase English letters. Removing duplicates means choosing two adjacent and equal letters and removing them.

We repeatedly make duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made.(Answer is proven as unique)

Input Format
First Parameter - String s

Output Format
Return the string

Example 1:
Input: s = "abbaca"
Output: "ca"
Explanation: From the "abbaca" remove bb then the result is aaca then 
again remove aa which makes the remaing string as "ca".
Example 2:
Input: s = "azxxzy"
Output: "ay"
Constraints:
1 <= s.length <= 105
s consists of lowercase English letters.
Time complexity: O(n)
Auxillary space complexity: O(n)

Answer : 

string solve(string s){
    stack<char> st;
    for(int i=s.size()-1;i>=0;i--){
        if(!st.empty() and st.top() == s[i]){
            st.pop();
        }else{
            st.push(s[i]);
        }
    }
    string temp = "";
    while(!st.empty()){
        temp.push_back(st.top());
        st.pop();
    }
    return temp;
}

Question 4 : 

Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn’t exist, return -1 for this number.

Input Format
First Parameter - number n

Second Parameter - array nums of size n

Output Format
Return the array

Example 1:
Input:
    4
    1 3 2 4
Output:
    3 4 4 -1
Explanation:
    In the array, the next larger element to 1 is 3, 3 is 4, 2 is 4 and for 4 needs to search circularly. Since there exists no next number greater than 4, it's -1. 
Example 2:
Input:
    5
    6 8 0 1 3
Output:
    8 -1 1 3 6
Explanation: 
    In the array, the next larger element to 6 is 8, 8 is -1, 0 is 1, 1 is 3 and 3 is 6.
Constraints:
1 ≤ n ≤ 104
-109 ≤ arr[i] ≤ 109
Expected Time Complexity: O(N)
Expected Auxilliary Space: O(N)

Answer : 

vector<int> solve(int n, vector<int> nums){

    vector<int> res(n);
    stack<int> st;
    for(int i=2*n-1;i>=0;i--)
    {
        while(!st.empty() && nums[i%n]>=st.top())
                st.pop();
        
            if(st.empty()) res[i%n] = -1;
            else res[i%n] = st.top();
        
        st.push(nums[i%n]);
    }
    return res;
}
