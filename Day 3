Question 1 :
Given an arr of size n. Return the second largest element.

Input Format
First Parameter - number n

Second Parameter - array arr of characters of size n

Output Format
Return the number.

Example 1:
Input:
    6
    2 1 2 8 7 8
Output:
    7
Explanation:
    The second largest element is 7.
Example 2:
Input:
    2
    20 10
Output:
    10
Explanation:
    The second largest is 10.
Constraints
1 < n <= 105
-104 <= arr[i] <= 104
Expected Time Complexity: O(n)
Expected Space Complexity: O(1)

Solution : 

int solve(int n, vector<int> arr){
    int temp = INT_MIN;
    int max = INT_MIN;
    
    for(int i=0 ;i<n ;i++){

        if(arr[i] > temp and arr[i] < max){
            temp = arr[i];
        }

        if(arr[i] > max){
            temp = max;
            max = arr[i];
        }
        
    }

    return temp;
}

Question 2 :

Return the pattern of sizeM x N with specifications:

The pattern should have ‘DEVSNEST!’ written in the center.
The pattern should only use |, . and - characters
Note: M is an odd natural number, and N is 3 times M

Input Format
First Parameter - Integer M

Second Parameter - Integer N

Output Format
Return the array of string

Example 1
Input: 
    9
    27
Output:
    ------------.|.------------
    ---------.|..|..|.---------
    ------.|..|..|..|..|.------
    ---.|..|..|..|..|..|..|.---
    ---------DEVSNEST!---------
    ---.|..|..|..|..|..|..|.---
    ------.|..|..|..|..|.------
    ---------.|..|..|.---------
    ------------.|.------------
Constraints
5 < N < 101
15 < M < 303
M is an odd natural number, and N is 3 times M.

solution :

vector<string> solve(int m, int n){
    vector<string> ans;
    string temp = "";

    for(int j=0;j<m/2;j++){
        // step 1 :
        // printing the first part
        int num = 3*(2*j+1);
        for(int i=0;i<(n - num)/2;i++){
            temp = temp + "-";
        }

        // step 2 :
        for(int i=0;i<2*j+1;i++){
            temp = temp + ".|.";
        }

        // step 3 :
        num = 3*(2*j+1);
        for(int i=0;i<(n - num)/2;i++){
            temp = temp + "-";
        }
        
        // step 4 :
        ans.push_back(temp);
        temp = "";
    }

    for(int i=0;i<(n-9)/2;i++){
       temp = temp + "-";
    }

    temp = temp + "DEVSNEST!";

    for(int i=0;i<(n-9)/2;i++){
       temp = temp + "-";
    }

    ans.push_back(temp);
    temp = "";

    for(int j=m/2-1;j>=0;j--){
        // step 1 :
        // printing the first part
        int num = 3*(2*j+1);
        for(int i=0;i<(n - num)/2;i++){
            temp = temp + "-";
        }

        // step 2 :
        for(int i=0;i<2*j+1;i++){
            temp = temp + ".|.";
        }

        // step 3 :
        num = 3*(2*j+1);
        for(int i=0;i<(n - num)/2;i++){
            temp = temp + "-";
        }
        
        // step 4 :
        ans.push_back(temp);
        temp = "";
    }

    return ans;
}

Question 3 :

In a contest of Mario Kart, the score of each player is recorded in the 2D array leaderboard. Each row of the leaderboard contains the player number and their score.

Return the players with the second lowest score.

If there are multiple players with same score, return them in non-decreasing order.

Input Format
First Parameter - 2D array leaderboard

Output Format
Return the array.

Example 1:
Input:
    5 2
    3 37
    1 41
    2 37
    5 41
    4 35
Output:
    2 3
Explanation:
     5 2 is the size of the leaderboard. The second lowest score is 37 and their corresponding players are 2 and 3.
Example 2:
Input:
    7 2
    1 41
    3 47
    6 41
    4 50
    7 36
    2 47
    5 50
Output:
    1 6
Explanation:
    7 2 is the size of the leaderboard. The second lowest score is 41 and the corresponding players are 1 and 6.
Constraints
3 <= leaderboard.size <= 50
Expected Time Complexity: O(n log(n))
Expected Space Complexity: O(n)

solution :

bool comparator(vector<int> &v1,vector<int> &v2){
    return v1[1]<v2[1];
}
vector<int> solve(vector<vector<int>> &mat){
    // SORT 
    sort(mat.begin(),mat.end(),comparator);
    vector<int> ans;
    int temp = mat[0][1];
    for(int i=0;i<mat.size();i++){
            if(mat[i][1]>temp){
                temp = mat[i][1];
                break;
            }
    }

    int i = 0;
    while(i < mat.size() and mat[i][1] <= temp){
        if(mat[i][1] == temp){
            ans.push_back(mat[i][0]);
        }
        i++;
    }
    sort(ans.begin(),ans.end());
    return ans;
}
