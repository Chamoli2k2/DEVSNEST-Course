Question 1 : 

Given an array of integers nums which are sorted in ascending order, and an integer target, write a function to search target in nums. If the target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

Input Format
First Parameter - number n

Second Parameter - array of integers nums of size n

Third Parameter - number target

Output Format
Return the number

Example 1
Input:
    6
    -1 0 3 5 9 12
    9
Output:
    4
Explanation:
    Explanation: 9 exists in nums and its index is 4
Example 2
Input:
    6
    -1 0 3 5 9 12
    2
Output:
    -1
Explanation:
    2 does not exist in nums so return -1
Constraints
1 <= nums.length <= 104
-104 < nums[i], target < 104
All the integers in nums are unique, nums is sorted in ascending order.
Expected Time Complexity: O(log n)
Expected Space Complexity: O(1)

Answer : 

int solve(int n, vector<int> nums, int target){
    int s = 0;
    int e = n-1;

    int mid = s + (e - s)/2;

    while(s <= e){
        if(nums[mid] == target){
            return mid;
        }
        else if(nums[mid] > target){
            e = mid - 1;
        }
        else{
            s = mid + 1;
        }

        mid = s + (e - s)/2;
    }

    return -1;
    
Question 2 : 
    
Given an sorted array arr of size n and an integer key. If the target exists in the array, return its index. If not, return the index where it would be if it were inserted in order.

Input Format
First Parameter - number n

Second Parameter - array arr of size n

Third Parameter - number key

Output Format
Return the number.

Example 1:
Input:
    5
    1 3 4 5 10
    2
Output:
    1
Explanation:
    Since 2 is missing from the given array, it would be inserted at index 1.
Example 2:
Input:
    5
    1 3 8 9 11
    9
Output:
    3
Explanation:
    The key 9 was found at index 3.
Constraints
1 < n <= 104
-104 <= arr[i], key <= 104
All the integers in arr are unique.
arr is sorted in ascending order.
Expected Time Complexity: O(log n)
Expected Space Complexity: O(1)

Answer : 

int solve(int n, vector<int> arr, int key){
    int s = 0;
    int e = n-1;
    int mid = s + (e - s)/2;

    while(s <= e){
        if(arr[mid] == key){
            return mid;
        }
        else if(arr[mid] > key){
            e = mid - 1;
        }
        else{
            s = mid + 1;
        }

        mid = s + (e - s)/2;
    }

    mid = mid == n-1 && key > arr[mid]? mid+1 : mid;
    return mid;
}
