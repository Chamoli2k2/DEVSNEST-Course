Question 1 : 

The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.  
Given n, calculate F(n).

Try doing it in both recursive and iterative method

Input Format
First Parameter - Integer n

Output Format
Return the integer

Example 1:
Input:
    3
Output:
    2
Explanation:
    F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 2:
Input:
    4
Output:
    3
Explanation:
    F(4) = F(3) + F(2) = 2 + 1 = 3.
Constraints:
0 <= n <= 30

Answer : 

int solve(int n){
   if(n == 0 or n == 1){
       return n;
   }

   return solve(n-1) + solve(n-2);
}

Question 2 : 

The factorial of a positive integer n is the product of all positive integers less than or equal to n.

You’re given a number and you have to calculate it’s factorial.

Note: Factorial of 1 = 1, Factorial of 0 = 1

Try doing it in both recursive and iterative method

Input Format
First Parameter - Number n

Output Format
Return the number

Example 1:
Input : 4
Output : 24
Constraints
0<=n<=10

Answer : 

int solve(int n){
    if(n == 0){
        return 1;
    }

    return n*solve(n-1);
}

Question 3 : 

Given an integer n , return 1(true) if it is a power of two. Otherwise, return 0(false) .

An integer x is said to be in power of two if and only if there exists an integer i such that 2i == x.

Input Format
First Parameter -Number n

Output Format
Return the number (0 or 1).

Try doing it in both recursive and iterative method

Example 1
Input: 22
Output: 0
Explanation: 22 is not power of 2.
Example 2
Input: n=1
Output: 1
Explanation: 2 to power 0 is 1
Example 3
Input: n= 64
Output: 1
Explanation: 2 to power 6 is 64
Constraints:
-231 <= n <= 231-1 - 1

Answer : 
int solve(int n){
    if(n == 0){
        return false;
    }

    while(n != 1){
        if(n%2 == 0){
            n/=2;
        }else{
            return false;
        }
    }

    return true;
}
