Question 1 :

Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i are at (i, ai) and (i, 0).

Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Note: that you may not slant the container.

Input Format
First Parameter - number n

Second Parameter - array arr of size n

Output Format
Return the number.

Example 1:
"1

Input:
    9
    1 8 6 2 5 4 8 3 7
Output:
    49
Explanation:
    The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:
Input:
    2
    1 1
Output:
    1
Constraints:
2 <= n <= 105
0 <= arr[i] <= 104
Expected Space Complexity: O(n)
Expected Time Complexity: O(1)

Answer : 

int solve(int n, vector<int> arr){
    // Algoritm
    // Two pointer algorithm
    int i = 0;
    int j = n - 1;
    int maxWater = INT_MIN;
    while(i < j){
        if(arr[i] >= arr[j]){
            int height = arr[j];
            int area = height * (j - i);
            maxWater = max(maxWater,area);
            j--;
        }else{
            int height = arr[i];
            int area = height * (j - i);
            maxWater = max(maxWater,area);
            i++;
        }
    }

    return maxWater;
}


Question 2 : 

Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0’s, and return the matrix.

You must do it in place.

Input Format
First Parameter - matrix of size m x n

Output Format
Return the matrix.

Example 1:
Input:
     3 3
     1 1 1
     1 0 1
     1 1 1
Output:
     [[1,0,1],[0,0,0],[1,0,1]]
Explanation: 3 3 represents the size of the matrix. All the value which are in row 1 and column 1 is converted to 0.
   
Example 2:
Input:
    3 4
    0 1 2 0
    3 4 5 2
    1 3 1 5
Output:
    [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
Constraints:
m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-2^31 <= matrix[i][j] <= 2^31 - 1
Expected Time Complexity: O(m x n)
Expected Space Complexity: O(1)

Answer : 

vector<vector<int>> solve(vector<vector<int>> arr){
        set<int> row;
        set<int> col;
        
        vector<vector<int>> ans;
        
        int n = arr.size();
        int m = arr[0].size();
        
        // searching for element zero in matrix and if found then saving its row and col index in set
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(arr[i][j] == 0){
                    row.insert(i);
                    col.insert(j);
                }
            }
        }
        
        // changing every row to 1
        for(auto it=row.begin();it!=row.end();it++){
            int num = *it;
            for(int j=0;j<m;j++){
                arr[num][j] = 0;
            }
        }
        
        // changing every col to 1
        for(auto it=col.begin();it!=col.end();it++){
            int num = *it;
            for(int j=0;j<n;j++){
                arr[j][num] = 0;
            }
        }

        for(int i=0;i<n;i++){
            ans.push_back(arr[i]);
        }

        return ans;
}

Question 3 : 

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals and return an array of the non-overlapping intervals that cover all the intervals in the input.

Input Format
First Parameter - matrix intervals of size m x n

Output Format
Return the matrix.

Example 1:
Input:
     4 2
     1 3
     2 6
     8 10
     15 18
Output:
     [[1,6],[8,10],[15,18]]
Explanation:
4 2 represents the size of the matrix. Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
   
Example 2:
Input:
    2 2
    1 4
    4 5
Output:
    [[1,5]]
Explanation: 
    2 2 represents the size of the matrix. Intervals [1,4] and [4,5] are considered overlapping.
Constraints:
1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104

Answer : 

vector<vector<int>> solve(vector<vector<int>> arr){
    int n = arr.size();
    int m = arr[0].size();

    vector<vector<int>> ans;
    
    // step 1 : sort 
    sort(arr.begin(),arr.end());
    vector<int> temp = arr[0];
    for(int i=1;i<n;i++){
        if(arr[i][0] <= temp[1]){
            temp[1] = max(arr[i][1],temp[1]);
        }else{
            ans.push_back(temp);
            temp = arr[i];
        }
    }
    ans.push_back(temp);

    return ans;

}

Question 4 : 

There is a programming language with only four operations and one variable X:

++X and X++ increment the value of the variable X by 1. --X and X-- decrements the value of the variable X by 1. Initially, the value of X is 0.

Given an array of strings operations containing a list of operations, return the final value of X after performing all the operations.

Input Format
First Parameter - number n

Second Parameter - Array arr of strings

Output Format
Return the number

Example 1:
Input:
    3
    --X X++ X++
Output:
    1
Explanation:
    The operations are performed as follows:
Initially, X = 0.
--X: X is decremented by 1, X =  0 - 1 = -1.
X++: X is incremented by 1, X = -1 + 1 =  0.
X++: X is incremented by 1, X =  0 + 1 =  1.
Example 2:
Input:
    3
    ++X ++X X++
Output:
    3
Explanation:
    The operations are performed as follows:
Initially, X = 0.
++X: X is incremented by 1, X = 0 + 1 = 1.
++X: X is incremented by 1, X = 1 + 1 = 2.
X++: X is incremented by 1, X = 2 + 1 = 3
Constraints:
1 <= arr.length <= 100
arr[i] will be either ++X, X++, --X, or X--.
Expected Time Complexity: O(n)
Expected Space Complexity: O(1)

Answer  :

int solve(int n, vector<string> arr){
    // making our variable X
    int x = 0;

    for(int i=0;i<n;i++){
        string temp = arr[i];
        // Checking if the operation is preincrement or decrement
        if(temp[0] == '-' or temp[0] == '+'){
            // checking if it is increment 
            if(temp[0] == '+'){
                ++x;
            }else{
                --x;
            }
        }
        // otherwise it will be post increment or decrement
        else{
            // checking if it is increment or not
            if(temp[2] == '+'){
                x++;
            }else{
                x--;
            }
        }
    }

    return x;
}

Question 5 : 

From a zero-based permutation nums (0-indexed), we have to build an array(ans) of same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and then return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

Input Format
First Parameter - number n

Second Parameter - array arr of size n

Output Format
Return the array.

Example 1:
Input: 
    6
    0 2 1 5 3 4
Output: 
    0 1 2 4 5 3
Explanation: The array ans is built as follows: 
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
= [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]
= [0,1,2,4,5,3]
Example 2:
Input: nums =
    6 
    5 0 1 2 3 4
Output: 
    4 5 0 1 2 3 
Explanation: ans = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]
= [4,5,0,1,2,3]
Constraints:
1 <= nums.length <= 1000
0 <= nums[i] < nums.length
The elements in nums are distinct.
Time complexity: O(n)
Auxillary space complexity: O(n)

Answer :

vector<int> solve(int n, vector<int> arr){
    vector<int> ans(n);
    for(int i=0;i<n;i++){
        ans[i] = arr[arr[i]];
    }
    return ans;
}

Question 6 : 

Given an array of intervals such that interval[i] = [starti, endi], return the minimum number of intervals needed to remove for making the remaining intervals non-overlapping.

Input Format
First Parameter - matrix intervals of size m x n

Output Format
Return the number.

Example 1:
Input:
    4 2
    1 2
    2 3
    3 4 
    1 3
Output: 1
Explanation: 4 2 represents the size of the interval. 1 3 can be removed and the rest of the intervals are non-overlapping.
Example 2:
Input:
    3 2
    1 2
    1 2
    1 2
Output: 2
Explanation: 3 2 represents the size of the intervals. You need to remove two [1,2] to make the rest of the intervals 
non-overlapping.
Constraints:
1 <= interval.length <= 105
interval[i].length == 2
-5 * 104 <= start[i] < end[i] <= 5 * 104
Expected Time Complexity: O(n logn)
Expected Auxiliary Space: O(1)

Answer : 

int solve(vector<vector<int>> arr){
    
    sort(arr.begin(),arr.end());
        int n = arr.size();
        int left = 0;
        int right = 1;
        int count = 0;
        
        while(right < n){
            // case 1 : if no overlapping
            if(arr[left][1] <= arr[right][0]){
                left = right;
                right ++;
            }
// case 2 : if overlapping is not complete we delete the one with larger ending
            else if(arr[left][1] <= arr[right][1]){
                right ++;
                count ++;
            }
            else if(arr[left][1] > arr[right][1]){
                count ++;
                left = right;
                right ++;
            }
        }
        
        return count;
}

Question 7 : 

Given array of non-overlapping intervals, we have interval[i] = [starting, ending] which is the start and end of given interval and the intervals is sorted in ascending order from start. We are also given an interval arr = [start, end] that represents the start and end of another interval.

Insert arr into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals we may also merge the intervals if necessary.

Return the interval array after the insertion.

Input Format
First Parameter - Matrix intervals of size m x n

Second Parameter - number n

Third Parameter - Array arr of size n

Output Format
Return the matrix

Example 1:
Input: interval = [[1,2],[3,5],[6,7],[8,10],[12,16]], arr = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: since the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
Constraints:
0 <= interval.length <= 104
intervals[i].length == 2
0 <= starting<= ending <= 105
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

Answer : 


