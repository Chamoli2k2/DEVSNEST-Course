Question 1 : 

Given an array arr containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Input Format
First parameter - number n

Second Parameter - array of integers arr of size n

Output Format
Return the number

Example 1
Input: 
   3
   3 0 1
Output: 
   2
Explanation: 
    n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in arr.
Example 2
Input: 
   2
   0 1
Output: 
   2
Explanation: 
   n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in arr.
Constraints
1 <= n <= 104
0 <= arr[i] <= n
All the numbers of arr are unique.
Expected Time complexity: O(n)
Expected Space Complexity: O(1)

Answer : 

int solve(int n, vector<int> arr){
    int XOR = 0;
    for(int i=1;i<=n;i++){
        XOR = XOR ^ i;
    }

    for(int i=0;i<n;i++){
        XOR = XOR ^ arr[i];
    }

    return XOR;
}

Question 1 : 

Implement pow(x, n), which calculates x raised to the power n.

Return the number

Input Format
First Parameter - number x

Second Parameter - number n

Output Format
Return the number.

Example 1:
Input:
    3
    4
Output:
    81
Example 2:
Input:
    7
    5
Output:
    16807
Constraints
-10< x < 10
0 <= n <= 5
Expected Time Complexity: O(log n)
Expected Space Complexity: O(1)

Amswer : 

int f(int x,int n){
    // base case 
    if(n == 1){
        return x;
    }

    int halfAnswer = f(x,n/2);

    int ans;
    if(n & 1){
        ans = halfAnswer * halfAnswer * x;
    }else{
        ans = halfAnswer * halfAnswer;
    }

    return ans;
}
int solve(int x, int n){
    if(x == 0){
        return 1;
    }

    if(n == 0){
        return 1;
    }

    return f(x,n);
}

Question 3 : 

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

Input Format
First parameter - Size of array n
Second parameter - Integer array arr

Output Format
Return the number

Example 1:
Input:
    9
    -2 1 -3 4 -1 2 1 -5 4
Output:
     6
Explanation:
    4 -1 2 1 has the largest sum = 6.
Example 2:
Input:
     1
     1
Output:
     1
Example 3:
Input:
     5
     5 4 -1 7 8   
Output:
     23
Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104
Expected Time Complexity: O(n)
Expected Space Complexity: O(1)

Answer :

int solve(int n, vector<int> arr){
    int curr = 0;
    int maxi = INT_MIN;

    for(int i=0;i<n;i++){
        curr = curr + arr[i];

        if(curr > maxi){
            maxi = curr;
        }

        if(curr < 0){
            curr = 0;
        }
    }

    return maxi;
}

Question 4 : 

Given an integer array nums of size n, return all the triplets [nums[i], nums[j], nums[k]] such that i != j,i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

The result must be in non-decreasing order.

Input Format
First Parameter - number n

Second Parameter - array nums

Output Format
Return the array of array.

Example 1:
Input:
    6
    -1 -2 -4 2 2 3
Output:
    -4 2 2
    -2 -1 3
Explanation:
    The sum of (-4 + 2 + 2) = 0 and the indices of each element are not equal to each other, i.e. 2 != 3, 3 != 4, 4 != 2. 
Example 2:
Input
    0
Output:
    [] - Empty array
Explanation:
    There is no 3 elements that sum upto zero. 
Constraints
0 <= n <= 3000
-105 <= nums[i] <= 105
Expected Time Complexity: O(n2)

Answer : 

vector<vector<int>> solve(int n, vector<int> nums){
    sort(nums.begin(),nums.end());
    int i = 0;
    vector<vector<int>> ans;
    set<vector<int>> s;
    while(i < n-2){
        int j = i + 1;
        int k = n-1;
        while(j < k){
            if(nums[i] + nums[j] + nums[k] == 0){
                vector<int> temp;
                temp.push_back(nums[i]);
                temp.push_back(nums[j]);
                temp.push_back(nums[k]);
                s.insert(temp);
                j++;
                k--;
            }else if (nums[i] + nums[j] + nums[k] > 0){
                k--;
            }else{
                j++;
            }
        }
        i++;
    }

    for(auto it=s.begin();it!=s.end();it++){
        ans.push_back(*it);
    }

    return ans;
}

Question 5 : 

Given an integer array arr, return an array res such that res[i] is equal to the product of all the elements of arr except arr[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) and without using the division operation.

Input Format
First Parameter - int n

Second Parameter - array arr

Output Format
Return the array.

Example 1:
Input:
    4
    1 2 3 4
Output:
   24 12 8 6
Explanation:
    The output contains the product of each element except itself. For res[0], product of all nums except self is 2 * 3 * 4 = 24 and so on...
Example 2:
Input:
    6
    4 -1 5 10 2 1
Output:
    -100 400 -80 -40 -200 -400
Explanation:
    The output contains the product of each element except itself.
Constraints
2 <= n <= 105
-30 <= arr[i] <= 30
Expected Time Complexity: O(n)
Expected Space Complexity: O(n)

Answer : 

vector<int> solve(int n, vector<int> arr){
    // case 1 : no zeroes
    // case 2 : two zeroes
    // case 3 : 1 zero

    int countZero = 0;
    int pdt = 1;
    for(int i=0;i<n;i++){
        if(arr[i] != 0){
            pdt = pdt * arr[i];
        }else{
            countZero++;
        }
    }

    // if count > 1 return 0 direct
    vector<int> ans(n,0);
    if(countZero > 1){
        return ans;
    }

    // if count == 1
    if(countZero == 1){
        for(int i=0;i<n;i++){
            if(arr[i] == 0){
                ans[i] = pdt;
            }
        }

        return ans;
    }
    // no zeroes
    for(int i=0;i<n;i++){
        int num = pdt / arr[i];
        ans[i] = num;
    }

    return ans;
}

Question 6 : 

You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to modify the input 2D matrix directly.

You are not allowed to allocate another 2D matrix and do the rotation.

Input Format
First Parameter - vector<vector<int>>mat of dimension n x n

Output Format
Return the matrix.

Example 1:
Input:
    3 3
    1 2 3
    4 5 6
    7 8 9
Output:
    7 4 1
    8 5 2
    9 6 3
mat1

Example 2:
Input:
    4 4
    5 1 9 11
    2 4 8 10
    13 3 6 7
    15 14 12 16
Output:
    15 13 2 5
    14 3 4 1
    12 6 8 9
    16 7 10 11
mat2

Constraints
3 <= n <= 20
Expected Time Complexity: O(n2)
Expected Space Complexity: O(1)

Answer : 

vector<vector<int>> solve(vector<vector<int>> matrix){
        // Algorithm : 
        // Step 1 : Take transpose of matrix 1st
        // Step 2 : Reverse every row of matrix 
        
        // Algo for transposing the matrix
        int m = matrix.size();
        
        for(int i=0;i<m;i++){
            for(int j=0;j<i;j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }
        
        // Reverse every element of row 
        
        int n = matrix[0].size();
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n/2;j++){
                swap(matrix[i][j],matrix[i][n-1-j]);
            }
        } 

        vector<vector<int>> ans;
        for(int i=0;i<m;i++){
            ans.push_back(matrix[i]);
        }

        return ans;
}

